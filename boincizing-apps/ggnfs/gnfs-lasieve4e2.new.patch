Index: src/experimental/lasieve4_64/gnfs-lasieve4e.c
===================================================================
--- src/experimental/lasieve4_64/gnfs-lasieve4e.c	(revision 414)
+++ src/experimental/lasieve4_64/gnfs-lasieve4e.c	(working copy)
@@ -13,6 +13,29 @@
   02111-1307, USA.
 */
 
+#ifdef HAVE_BOINC
+	#include <stdarg.h>
+	#ifdef _WIN32
+		#include "boinc_win.h"
+		#include "boinc_api.h"
+		#include "filesys.h"
+	#else
+		#include <boinc/boinc_api.h>
+		#include <boinc/filesys.h>
+	#endif
+
+	void boincstop(int retcode);
+	int boincstart(int argc_init, char **argv);
+	void boincstatus(double percent);
+	int main_lasieve(int argc, char **argv);
+
+	static char path_in[500];
+	static char path_out[500];
+	#define exit(i) boincstop(i)
+	#define fopen(i,j) boinc_fopen(i,j)
+#endif
+
+
 // #include "lasieve.h"
 
 #include <stdio.h> 
@@ -367,12 +390,12 @@
     if(*p == ':') {
       if(i++ == side) tmp = p; /* we will only scan this section for a q0 */
     } else if(!(*p == '-' || *p == ',' || isspace(*p) || isxdigit(*p))) {
-      if(first++ == 0) printf(" Warning! some corrupt lines in the original file\n");
+      if(first++ == 0) fprintf(stderr, " Warning! some corrupt lines in the original file\n");
       return -1;
     }
   }
   if(i!=2) {
-    printf(" Warning: an incomplete line in the original file; if just a few, it's ok, they will be skipped\n");
+    fprintf(stderr, " Warning: an incomplete line in the original file; if just a few, it's ok, they will be skipped\n");
     return -1;           /* must have two ':' some ',' and hexdigits */
   }
   
@@ -396,7 +419,30 @@
 }  
 
 /**************************************************/
+#ifdef HAVE_BOINC
+/* this main talks with BOINC */
+//you must ensure this is enough
+#define ARGVCOUNT 12
 int main(int argc, char **argv)
+{
+	int app_argc;
+	char* app_argv[ARGVCOUNT];
+	int retcode;
+	app_argv[0] = argv[0];
+	app_argc= boincstart(1,app_argv);
+	if(argc < 0) {
+	  retcode = 1;
+	} else {
+	  retcode= main_lasieve(app_argc,app_argv);
+	}
+	boincstatus(1.0);
+	boincstop(retcode);
+	return retcode;
+}
+int main_lasieve(int argc, char **argv)
+#else
+int main(int argc, char **argv)
+#endif
      /**************************************************/
 {
   u16_t zip_output,force_aFBcalc;
@@ -404,6 +450,9 @@
   u32_t all_spq_done;
   u32_t n_spq, n_spq_discard;
   double tStart, tNow, lastReport;
+#ifdef HAVE_BOINC
+  double  pct;
+#endif
   
 #if defined (_MSC_VER) && defined (_DEBUG)
   int tmpDbgFlag;
@@ -538,6 +587,8 @@
       }
     }
 
+	fprintf(stderr, "gnfs-lasieve4I%de (with asm64): L1_BITS=%d, SVN $Revision$\n", I_bits, L1_BITS);
+	
     if(verbose) { /* first rudimentary test of automatic $Rev reporting */
       fprintf(stderr, "gnfs-lasieve4I%de (with asm64): L1_BITS=%d, SVN $Revision$\n", I_bits, L1_BITS);
     }
@@ -560,7 +611,7 @@
 	ret = parse_q_from_line(buf);
       }
       if(ret < 0) fprintf(g_ofile, "\n"); /* encapsulating the last incomplete line */
-      printf(" Resuming with -f %d -c %d\n", first_spq, sieve_count);
+      fprintf(stderr, " Resuming with -f %d -c %d\n", first_spq, sieve_count);
       first_spq1 = first_spq;
     }
     
@@ -616,7 +667,7 @@
     sieve_min[0] = sieve_min[1]=0;
     
     if (!(fp = fopen(base_name, "rb"))) {
-      printf("Error opening %s for read!\n", base_name);
+      fprintf(stderr, "Error opening %s for read!\n", base_name);
       return -1;
     }
     input_poly(N, poly, poldeg, poly + 1, poldeg + 1, m, fp);
@@ -675,7 +726,7 @@
 	} 
 #ifdef _NO
 	else {
-	  printf("Warning: Ignoring input line:\n%s\n", thisLine);
+	  fprintf(stderr, "Warning: Ignoring input line:\n%s\n", thisLine);
 	}
 #endif
       }
@@ -704,7 +755,7 @@
       }
       if(FB_bound[special_q_side]> first_spq) {
 	FB_bound[special_q_side]=(float) first_spq-1;
-	if(verbose) printf("Warning:  lowering FB_bound to %u.\n",first_spq-1);
+	if(verbose) fprintf(stderr, "Warning:  lowering FB_bound to %u.\n",first_spq-1);
 	//complain("Special q lower bound %u below rFB bound %g\n",
 	//first_spq,FB_bound[special_q_side]);
       }
@@ -2727,15 +2778,25 @@
       tNow = sTime();
       if (tNow > lastReport + 5.0) {
 	lastReport = tNow;
+#ifdef HAVE_BOINC
+      pct=((double)(special_q - first_spq))/((double)sieve_count);
+      boincstatus(pct);
+#else
         if(verbose) {
 	  fprintf(stderr, "\rtotal yield: %u, q=%u (%1.5lf sec/rel) ", 
 		(unsigned int)yield, (unsigned int)special_q, (tNow - tStart)/yield);
 	  fflush(stderr);
         }
+#endif
       }
     }
-    fprintf(stderr, "\rtotal yield: %u, q=%u (%1.5lf sec/rel) \n", 
-	    (unsigned int)yield, (unsigned int)special_q, (sTime() - tStart)/yield);
+#ifdef HAVE_BOINC
+    //periodically callback into boinc to show we are alive
+    pct=((double)(special_q - first_spq))/((double)sieve_count);
+    boincstatus(pct);
+#endif
+    fprintf(stderr, "\rtotal yield: %u, q=%u %1.5lf sec/rel, in %d seconds\n", 
+	    (unsigned int)yield, (unsigned int)special_q, (sTime() - tStart)/yield, (sTime() - tStart));
     free(r);
   }
   
@@ -2802,7 +2863,6 @@
 #endif
   }
   
-  logTotalTime();
   if(special_q>=last_spq&&all_spq_done!=0)exit(0);
   if(exitval == 0)exitval= 1;
   exit(exitval);
@@ -4164,3 +4224,96 @@
   fclose(g_ofile);
   free(ofn);
 }
+
+
+
+#ifdef HAVE_BOINC
+
+void fail(const char *str,...)
+{
+  va_list ap;
+  va_start(ap,str);
+  vfprintf(stderr,str,ap);
+  va_end(ap);
+  fprintf(stderr,"\n");
+  fflush(stderr);
+  boinc_finish(1);
+}
+
+int boincstart(int argc_init, char **argv)
+{
+  int status,i;
+  status = boinc_init();
+  if(status) {
+    fail("boinc_init() failed: %d",status);
+    return -1;
+  }
+  fprintf(stderr, "boinc initialized\n");
+  
+  status = boinc_resolve_filename("input_data", path_in,  sizeof(path_in)  );
+  if(status) {
+    fail("cannot resolve workunit file name");
+  }
+  else {
+    fprintf(stderr, "resolved input_data file to %s\n", path_in);
+  }
+  
+  status = boinc_resolve_filename("output_data", path_out, sizeof(path_out) );
+  if(status) {
+    fail("cannot resolve result file name");
+  }
+  else {
+    fprintf(stderr, "resolved output_data file to %s\n", path_out);
+  }
+  
+  fprintf(stderr, "work files resolved, now working\n");
+  
+  //construct arg list
+  argv[argc_init++]="-R";
+  argv[argc_init++]="-a";
+  argv[argc_init++]="-o";
+  argv[argc_init++]=path_out;
+  argv[argc_init++]=path_in; 
+  
+  for(i=0;i<argc_init;i++) {
+    fprintf(stderr,"-> %s\n",argv[i]);
+  }
+  
+  return argc_init;
+}
+
+void boincstop(int retcode)
+{
+  char command[1000];
+  memset(command, 0, 1000);
+  strcpy(command, "gzip ");
+  strncat(command, path_out, 1000 - strlen(command));
+  system(command);
+
+  memset(command, 0, 1000);
+  strcpy(command, "mv ");
+  strncat(command, path_out, 1000 - strlen(command));
+  strncat(command, ".gz ", 1000 - strlen(command));
+  strncat(command, path_out, 1000 - strlen(command));
+  system(command);
+
+  boinc_finish(retcode);
+}
+
+void boincstatus(double percent)
+{
+  if (percent < 1.0) boinc_fraction_done(percent);
+  
+#ifdef _WIN32
+  Sleep(1);
+#else
+  sleep(1);
+#endif
+  
+  if(boinc_time_to_checkpoint()) {
+    fflush(g_ofile);
+    boinc_checkpoint_completed();
+  }
+}
+
+#endif
